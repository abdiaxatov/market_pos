"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Badge } from "@/components/ui/badge"
import { Switch } from "@/components/ui/switch"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { Plus, AlertTriangle, Bell, Search, Calendar, Clock, CheckCircle, X, Settings, BellRing } from "lucide-react"
import { collection, addDoc, updateDoc, deleteDoc, doc, onSnapshot, query, orderBy } from "firebase/firestore"
import { db } from "@/lib/firebase"
import { formatDateTime } from "@/lib/utils"
import { useToast } from "@/components/ui/use-toast"

interface Alert {
  id: string
  type: "low_stock" | "expired" | "expiring_soon" | "custom"
  title: string
  message: string
  productId?: string
  productName?: string
  priority: "low" | "medium" | "high" | "critical"
  status: "active" | "acknowledged" | "resolved"
  createdAt: Date
  acknowledgedAt?: Date
  resolvedAt?: Date
  acknowledgedBy?: string
  resolvedBy?: string
  autoGenerated: boolean
}

interface AlertRule {
  id: string
  type: "low_stock" | "expiry_warning"
  isActive: boolean
  threshold: number
  daysBeforeExpiry?: number
  title: string
  message: string
  priority: "low" | "medium" | "high" | "critical"
  createdAt: Date
  updatedAt: Date
}

interface AlertsManagementProps {
  alerts: Alert[]
  inventory: any[]
}

const alertTypes = [
  { value: "low_stock", label: "Kam Stok", icon: AlertTriangle, color: "orange" },
  { value: "expired", label: "Muddati O'tgan", icon: Clock, color: "red" },
  { value: "expiring_soon", label: "Muddati Tugaydi", icon: Calendar, color: "yellow" },
  { value: "custom", label: "Maxsus", icon: Bell, color: "blue" },
]

const priorities = [
  { value: "low", label: "Past", color: "gray" },
  { value: "medium", label: "O'rta", color: "blue" },
  { value: "high", label: "Yuqori", color: "orange" },
  { value: "critical", label: "Kritik", color: "red" },
]

export function AlertsManagement({ alerts, inventory }: AlertsManagementProps) {
  const [isAddAlertDialogOpen, setIsAddAlertDialogOpen] = useState(false)
  const [isAddRuleDialogOpen, setIsAddRuleDialogOpen] = useState(false)
  const [alertRules, setAlertRules] = useState<AlertRule[]>([])
  const [searchTerm, setSearchTerm] = useState("")
  const [typeFilter, setTypeFilter] = useState<string>("all")
  const [statusFilter, setStatusFilter] = useState<string>("all")
  const [priorityFilter, setPriorityFilter] = useState<string>("all")
  const [newAlert, setNewAlert] = useState({
    type: "custom" as "low_stock" | "expired" | "expiring_soon" | "custom",
    title: "",
    message: "",
    productId: "",
    priority: "medium" as "low" | "medium" | "high" | "critical",
  })
  const [newRule, setNewRule] = useState({
    type: "low_stock" as "low_stock" | "expiry_warning",
    threshold: 10,
    daysBeforeExpiry: 3,
    title: "",
    message: "",
    priority: "medium" as "low" | "medium" | "high" | "critical",
  })
  const { toast } = useToast()

  useEffect(() => {
    const rulesQuery = query(collection(db, "warehouse_alert_rules"), orderBy("createdAt", "desc"))

    const unsubscribe = onSnapshot(rulesQuery, (snapshot) => {
      const rulesData = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      })) as AlertRule[]
      setAlertRules(rulesData)
    })

    return unsubscribe
  }, [])

  const filteredAlerts = alerts.filter((alert) => {
    const matchesSearch =
      alert.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      alert.message.toLowerCase().includes(searchTerm.toLowerCase()) ||
      alert.productName?.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesType = typeFilter === "all" || alert.type === typeFilter
    const matchesStatus = statusFilter === "all" || alert.status === statusFilter
    const matchesPriority = priorityFilter === "all" || alert.priority === priorityFilter
    return matchesSearch && matchesType && matchesStatus && matchesPriority
  })

  const saveAlert = async () => {
    if (!newAlert.title || !newAlert.message) {
      toast({
        title: "Xatolik",
        description: "Sarlavha va xabarni kiriting",
        variant: "destructive",
      })
      return
    }

    let productName = ""
    if (newAlert.productId) {
      const product = inventory.find((item) => item.id === newAlert.productId)
      productName = product?.name || ""
    }

    const alertData = {
      type: newAlert.type,
      title: newAlert.title,
      message: newAlert.message,
      productId: newAlert.productId || undefined,
      productName: productName || undefined,
      priority: newAlert.priority,
      status: "active" as const,
      autoGenerated: false,
      createdAt: new Date(),
    }

    try {
      await addDoc(collection(db, "warehouse_alerts"), alertData)

      toast({
        title: "Muvaffaqiyat",
        description: "Ogohlantirish qo'shildi",
      })

      setIsAddAlertDialogOpen(false)
      setNewAlert({
        type: "custom",
        title: "",
        message: "",
        productId: "",
        priority: "medium",
      })
    } catch (error) {
      toast({
        title: "Xatolik",
        description: "Ogohlantirishni saqlashda xatolik yuz berdi",
        variant: "destructive",
      })
    }
  }

  const saveRule = async () => {
    if (!newRule.title || !newRule.message) {
      toast({
        title: "Xatolik",
        description: "Sarlavha va xabarni kiriting",
        variant: "destructive",
      })
      return
    }

    const ruleData = {
      type: newRule.type,
      isActive: true,
      threshold: newRule.threshold,
      daysBeforeExpiry: newRule.type === "expiry_warning" ? newRule.daysBeforeExpiry : undefined,
      title: newRule.title,
      message: newRule.message,
      priority: newRule.priority,
      createdAt: new Date(),
      updatedAt: new Date(),
    }

    try {
      await addDoc(collection(db, "warehouse_alert_rules"), ruleData)

      toast({
        title: "Muvaffaqiyat",
        description: "Ogohlantirish qoidasi qo'shildi",
      })

      setIsAddRuleDialogOpen(false)
      setNewRule({
        type: "low_stock",
        threshold: 10,
        daysBeforeExpiry: 3,
        title: "",
        message: "",
        priority: "medium",
      })
    } catch (error) {
      toast({
        title: "Xatolik",
        description: "Qoidani saqlashda xatolik yuz berdi",
        variant: "destructive",
      })
    }
  }

  const acknowledgeAlert = async (alertId: string) => {
    try {
      await updateDoc(doc(db, "warehouse_alerts", alertId), {
        status: "acknowledged",
        acknowledgedAt: new Date(),
        acknowledgedBy: "Admin",
      })

      toast({
        title: "Muvaffaqiyat",
        description: "Ogohlantirish tasdiqlandi",
      })
    } catch (error) {
      toast({
        title: "Xatolik",
        description: "Ogohlantirishni tasdiqlashda xatolik yuz berdi",
        variant: "destructive",
      })
    }
  }

  const resolveAlert = async (alertId: string) => {
    try {
      await updateDoc(doc(db, "warehouse_alerts", alertId), {
        status: "resolved",
        resolvedAt: new Date(),
        resolvedBy: "Admin",
      })

      toast({
        title: "Muvaffaqiyat",
        description: "Ogohlantirish hal qilindi",
      })
    } catch (error) {
      toast({
        title: "Xatolik",
        description: "Ogohlantirishni hal qilishda xatolik yuz berdi",
        variant: "destructive",
      })
    }
  }

  const deleteAlert = async (alertId: string) => {
    try {
      await deleteDoc(doc(db, "warehouse_alerts", alertId))

      toast({
        title: "Muvaffaqiyat",
        description: "Ogohlantirish o'chirildi",
      })
    } catch (error) {
      toast({
        title: "Xatolik",
        description: "Ogohlantirishni o'chirishda xatolik yuz berdi",
        variant: "destructive",
      })
    }
  }

  const toggleRuleStatus = async (ruleId: string, isActive: boolean) => {
    try {
      await updateDoc(doc(db, "warehouse_alert_rules", ruleId), {
        isActive,
        updatedAt: new Date(),
      })

      toast({
        title: "Muvaffaqiyat",
        description: `Qoida ${isActive ? "faollashtirildi" : "o'chirildi"}`,
      })
    } catch (error) {
      toast({
        title: "Xatolik",
        description: "Qoida holatini o'zgartirishda xatolik yuz berdi",
        variant: "destructive",
      })
    }
  }

  const getAlertStats = () => {
    const activeAlerts = alerts.filter((alert) => alert.status === "active")
    const criticalAlerts = activeAlerts.filter((alert) => alert.priority === "critical")
    const highAlerts = activeAlerts.filter((alert) => alert.priority === "high")
    const acknowledgedAlerts = alerts.filter((alert) => alert.status === "acknowledged")
    const resolvedAlerts = alerts.filter((alert) => alert.status === "resolved")

    return {
      total: alerts.length,
      active: activeAlerts.length,
      critical: criticalAlerts.length,
      high: highAlerts.length,
      acknowledged: acknowledgedAlerts.length,
      resolved: resolvedAlerts.length,
    }
  }

  const alertStats = getAlertStats()

  const getPriorityColor = (priority: string) => {
    const priorityObj = priorities.find((p) => p.value === priority)
    return priorityObj ? priorityObj.color : "gray"
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "active":
        return "red"
      case "acknowledged":
        return "yellow"
      case "resolved":
        return "green"
      default:
        return "gray"
    }
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
        <div>
          <h2 className="text-2xl font-bold">Ogohlantirishlar Boshqaruvi</h2>
          <p className="text-muted-foreground">Omborxona ogohlantirishlari va qoidalarini boshqaring</p>
        </div>
        <div className="flex gap-2">
          <Dialog open={isAddRuleDialogOpen} onOpenChange={setIsAddRuleDialogOpen}>
            <DialogTrigger asChild>
              <Button variant="outline">
                <Settings className="h-4 w-4 mr-2" />
                Qoida Qo'shish
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Yangi Ogohlantirish Qoidasi</DialogTitle>
                <DialogDescription>Avtomatik ogohlantirish qoidasini yarating</DialogDescription>
              </DialogHeader>

              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="ruleType">Qoida Turi</Label>
                  <Select
                    value={newRule.type}
                    onValueChange={(value: "low_stock" | "expiry_warning") =>
                      setNewRule((prev) => ({ ...prev, type: value }))
                    }
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="low_stock">Kam Stok Ogohlantiruvi</SelectItem>
                      <SelectItem value="expiry_warning">Muddat Tugash Ogohlantiruvi</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {newRule.type === "low_stock" ? (
                  <div className="space-y-2">
                    <Label htmlFor="threshold">Minimal Stok Miqdori</Label>
                    <Input
                      id="threshold"
                      type="number"
                      value={newRule.threshold || ""}
                      onChange={(e) =>
                        setNewRule((prev) => ({ ...prev, threshold: Number.parseInt(e.target.value) || 0 }))
                      }
                      placeholder="10"
                    />
                  </div>
                ) : (
                  <div className="space-y-2">
                    <Label htmlFor="daysBeforeExpiry">Muddat Tugashidan Necha Kun Oldin</Label>
                    <Input
                      id="daysBeforeExpiry"
                      type="number"
                      value={newRule.daysBeforeExpiry || ""}
                      onChange={(e) =>
                        setNewRule((prev) => ({ ...prev, daysBeforeExpiry: Number.parseInt(e.target.value) || 0 }))
                      }
                      placeholder="3"
                    />
                  </div>
                )}

                <div className="space-y-2">
                  <Label htmlFor="ruleTitle">Sarlavha</Label>
                  <Input
                    id="ruleTitle"
                    value={newRule.title}
                    onChange={(e) => setNewRule((prev) => ({ ...prev, title: e.target.value }))}
                    placeholder="Ogohlantirish sarlavhasi"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="ruleMessage">Xabar</Label>
                  <Textarea
                    id="ruleMessage"
                    value={newRule.message}
                    onChange={(e) => setNewRule((prev) => ({ ...prev, message: e.target.value }))}
                    placeholder="Ogohlantirish xabari"
                    rows={3}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="rulePriority">Muhimlik Darajasi</Label>
                  <Select
                    value={newRule.priority}
                    onValueChange={(value: "low" | "medium" | "high" | "critical") =>
                      setNewRule((prev) => ({ ...prev, priority: value }))
                    }
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {priorities.map((priority) => (
                        <SelectItem key={priority.value} value={priority.value}>
                          {priority.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <DialogFooter>
                <Button variant="outline" onClick={() => setIsAddRuleDialogOpen(false)}>
                  Bekor qilish
                </Button>
                <Button onClick={saveRule}>Saqlash</Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>

          <Dialog open={isAddAlertDialogOpen} onOpenChange={setIsAddAlertDialogOpen}>
            <DialogTrigger asChild>
              <Button className="bg-gradient-to-r from-red-600 to-orange-600 hover:from-red-700 hover:to-orange-700">
                <Plus className="h-4 w-4 mr-2" />
                Ogohlantirish Qo'shish
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Yangi Ogohlantirish</DialogTitle>
                <DialogDescription>Maxsus ogohlantirish yarating</DialogDescription>
              </DialogHeader>

              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="alertType">Ogohlantirish Turi</Label>
                  <Select
                    value={newAlert.type}
                    onValueChange={(value: "low_stock" | "expired" | "expiring_soon" | "custom") =>
                      setNewAlert((prev) => ({ ...prev, type: value }))
                    }
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {alertTypes.map((type) => (
                        <SelectItem key={type.value} value={type.value}>
                          <div className="flex items-center gap-2">
                            <type.icon className="h-4 w-4" />
                            {type.label}
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {newAlert.type !== "custom" && (
                  <div className="space-y-2">
                    <Label htmlFor="productId">Mahsulot (ixtiyoriy)</Label>
                    <Select
                      value={newAlert.productId}
                      onValueChange={(value) => setNewAlert((prev) => ({ ...prev, productId: value }))}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Mahsulotni tanlang" />
                      </SelectTrigger>
                      <SelectContent>
                        {inventory.map((item) => (
                          <SelectItem key={item.id} value={item.id}>
                            {item.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                )}

                <div className="space-y-2">
                  <Label htmlFor="alertTitle">Sarlavha</Label>
                  <Input
                    id="alertTitle"
                    value={newAlert.title}
                    onChange={(e) => setNewAlert((prev) => ({ ...prev, title: e.target.value }))}
                    placeholder="Ogohlantirish sarlavhasi"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="alertMessage">Xabar</Label>
                  <Textarea
                    id="alertMessage"
                    value={newAlert.message}
                    onChange={(e) => setNewAlert((prev) => ({ ...prev, message: e.target.value }))}
                    placeholder="Ogohlantirish xabari"
                    rows={3}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="alertPriority">Muhimlik Darajasi</Label>
                  <Select
                    value={newAlert.priority}
                    onValueChange={(value: "low" | "medium" | "high" | "critical") =>
                      setNewAlert((prev) => ({ ...prev, priority: value }))
                    }
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {priorities.map((priority) => (
                        <SelectItem key={priority.value} value={priority.value}>
                          {priority.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <DialogFooter>
                <Button variant="outline" onClick={() => setIsAddAlertDialogOpen(false)}>
                  Bekor qilish
                </Button>
                <Button onClick={saveAlert}>Saqlash</Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-6">
        <Card className="bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-blue-700">Jami</CardTitle>
            <Bell className="h-4 w-4 text-blue-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-800">{alertStats.total}</div>
            <p className="text-xs text-blue-600">Barcha ogohlantirishlar</p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-red-50 to-red-100 border-red-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-red-700">Faol</CardTitle>
            <BellRing className="h-4 w-4 text-red-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-800">{alertStats.active}</div>
            <p className="text-xs text-red-600">Faol ogohlantirishlar</p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-red-50 to-red-100 border-red-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-red-700">Kritik</CardTitle>
            <AlertTriangle className="h-4 w-4 text-red-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-800">{alertStats.critical}</div>
            <p className="text-xs text-red-600">Kritik ogohlantirishlar</p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-orange-50 to-orange-100 border-orange-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-orange-700">Yuqori</CardTitle>
            <AlertTriangle className="h-4 w-4 text-orange-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-800">{alertStats.high}</div>
            <p className="text-xs text-orange-600">Yuqori muhimlik</p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-yellow-50 to-yellow-100 border-yellow-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-yellow-700">Tasdiqlangan</CardTitle>
            <CheckCircle className="h-4 w-4 text-yellow-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-yellow-800">{alertStats.acknowledged}</div>
            <p className="text-xs text-yellow-600">Tasdiqlangan</p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-green-50 to-green-100 border-green-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-green-700">Hal Qilingan</CardTitle>
            <CheckCircle className="h-4 w-4 text-green-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-800">{alertStats.resolved}</div>
            <p className="text-xs text-green-600">Hal qilingan</p>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Settings className="h-5 w-5" />
            Ogohlantirish Qoidalari
          </CardTitle>
          <CardDescription>Avtomatik ogohlantirish qoidalari</CardDescription>
        </CardHeader>
        <CardContent>
          {alertRules.length === 0 ? (
            <div className="text-center text-muted-foreground py-8">Hali ogohlantirish qoidalari yaratilmagan</div>
          ) : (
            <div className="space-y-3">
              {alertRules.map((rule) => (
                <div key={rule.id} className="flex items-center justify-between p-4 border rounded-lg">
                  <div className="flex-1">
                    <div className="flex items-center gap-3">
                      <h4 className="font-semibold">{rule.title}</h4>
                      <Badge variant={rule.isActive ? "default" : "secondary"}>
                        {rule.isActive ? "Faol" : "Nofaol"}
                      </Badge>
                      <Badge
                        className={`bg-${getPriorityColor(rule.priority)}-100 text-${getPriorityColor(rule.priority)}-800`}
                      >
                        {priorities.find((p) => p.value === rule.priority)?.label}
                      </Badge>
                    </div>
                    <div className="text-sm text-muted-foreground mt-1">{rule.message}</div>
                    <div className="text-xs text-muted-foreground mt-1">
                      {rule.type === "low_stock"
                        ? `Minimal stok: ${rule.threshold}`
                        : `${rule.daysBeforeExpiry} kun oldin ogohlantirish`}
                    </div>
                  </div>
                  <Switch checked={rule.isActive} onCheckedChange={(checked) => toggleRuleStatus(rule.id, checked)} />
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      <div className="flex flex-col gap-4 md:flex-row md:items-center">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Ogohlantirish qidirish..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>
        <Select value={typeFilter} onValueChange={setTypeFilter}>
          <SelectTrigger className="w-full md:w-[200px]">
            <SelectValue placeholder="Tur" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">Barcha turlar</SelectItem>
            {alertTypes.map((type) => (
              <SelectItem key={type.value} value={type.value}>
                {type.label}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
        <Select value={statusFilter} onValueChange={setStatusFilter}>
          <SelectTrigger className="w-full md:w-[200px]">
            <SelectValue placeholder="Holat" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">Barcha holatlar</SelectItem>
            <SelectItem value="active">Faol</SelectItem>
            <SelectItem value="acknowledged">Tasdiqlangan</SelectItem>
            <SelectItem value="resolved">Hal qilingan</SelectItem>
          </SelectContent>
        </Select>
        <Select value={priorityFilter} onValueChange={setPriorityFilter}>
          <SelectTrigger className="w-full md:w-[200px]">
            <SelectValue placeholder="Muhimlik" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">Barcha muhimlik</SelectItem>
            {priorities.map((priority) => (
              <SelectItem key={priority.value} value={priority.value}>
                {priority.label}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      <div className="space-y-4">
        {filteredAlerts.length === 0 ? (
          <Card>
            <CardContent className="flex flex-col items-center justify-center py-12">
              <Bell className="h-12 w-12 text-muted-foreground mb-4" />
              <h3 className="text-lg font-semibold mb-2">Ogohlantirishlar yo'q</h3>
              <p className="text-muted-foreground text-center mb-4">
                {searchTerm || typeFilter !== "all" || statusFilter !== "all" || priorityFilter !== "all"
                  ? "Qidiruv shartlariga mos ogohlantirish topilmadi"
                  : "Hali ogohlantirishlar mavjud emas"}
              </p>
            </CardContent>
          </Card>
        ) : (
          <div className="space-y-3">
            {filteredAlerts.map((alert) => {
              const alertType = alertTypes.find((t) => t.value === alert.type)
              const IconComponent = alertType?.icon || Bell

              return (
                <Card
                  key={alert.id}
                  className={`hover:shadow-lg transition-shadow border-l-4 border-l-${getPriorityColor(alert.priority)}-500`}
                >
                  <CardContent className="p-4">
                    <div className="flex items-start justify-between">
                      <div className="flex items-start gap-3 flex-1">
                        <div className={`p-2 rounded-lg bg-${getPriorityColor(alert.priority)}-100`}>
                          <IconComponent className={`h-4 w-4 text-${getPriorityColor(alert.priority)}-600`} />
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <h4 className="font-semibold">{alert.title}</h4>
                            <Badge className={`bg-${alertType?.color}-100 text-${alertType?.color}-800`}>
                              {alertType?.label}
                            </Badge>
                            <Badge
                              className={`bg-${getPriorityColor(alert.priority)}-100 text-${getPriorityColor(alert.priority)}-800`}
                            >
                              {priorities.find((p) => p.value === alert.priority)?.label}
                            </Badge>
                            <Badge
                              className={`bg-${getStatusColor(alert.status)}-100 text-${getStatusColor(alert.status)}-800`}
                            >
                              {alert.status === "active" && "Faol"}
                              {alert.status === "acknowledged" && "Tasdiqlangan"}
                              {alert.status === "resolved" && "Hal qilingan"}
                            </Badge>
                          </div>
                          <div className="text-sm mb-2">{alert.message}</div>
                          {alert.productName && (
                            <div className="text-sm text-muted-foreground mb-2">
                              <strong>Mahsulot:</strong> {alert.productName}
                            </div>
                          )}
                          <div className="text-xs text-muted-foreground">
                            Yaratilgan: {formatDateTime(alert.createdAt)}
                            {alert.autoGenerated && " (Avtomatik)"}
                          </div>
                          {alert.acknowledgedAt && (
                            <div className="text-xs text-muted-foreground">
                              Tasdiqlangan: {formatDateTime(alert.acknowledgedAt)}
                              {alert.acknowledgedBy && ` (${alert.acknowledgedBy})`}
                            </div>
                          )}
                          {alert.resolvedAt && (
                            <div className="text-xs text-muted-foreground">
                              Hal qilingan: {formatDateTime(alert.resolvedAt)}
                              {alert.resolvedBy && ` (${alert.resolvedBy})`}
                            </div>
                          )}
                        </div>
                      </div>

                      <div className="flex gap-2">
                        {alert.status === "active" && (
                          <>
                            <Button variant="outline" size="sm" onClick={() => acknowledgeAlert(alert.id)}>
                              <CheckCircle className="h-4 w-4" />
                            </Button>
                            <Button variant="outline" size="sm" onClick={() => resolveAlert(alert.id)}>
                              Hal qilish
                            </Button>
                          </>
                        )}
                        {alert.status === "acknowledged" && (
                          <Button variant="outline" size="sm" onClick={() => resolveAlert(alert.id)}>
                            Hal qilish
                          </Button>
                        )}
                        <Button variant="outline" size="sm" onClick={() => deleteAlert(alert.id)}>
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )
            })}
          </div>
        )}
      </div>
    </div>
  )
}
