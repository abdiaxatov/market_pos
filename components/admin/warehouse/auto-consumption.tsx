"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { Switch } from "@/components/ui/switch"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Plus, Calculator, ChefHat, Search, Calendar, Activity, Settings, Play, Pause, RotateCcw } from "lucide-react"
import { collection, addDoc, updateDoc, doc, onSnapshot, query, orderBy } from "firebase/firestore"
import { db } from "@/lib/firebase"
import { formatCurrency, formatDate, formatDateTime } from "@/lib/utils"
import { useToast } from "@/components/ui/use-toast"

interface AutoConsumptionLog {
  id: string
  date: string
  menuId: string
  dish: string
  portionsMade: number
  ingredientsUsed: {
    productId: string
    product: string
    used: number
    unit: string
    unitPrice: number
    totalCost: number
  }[]
  totalCost: number
  autoGenerated: boolean
  createdAt: Date // Ensure this is a Date object
}

interface AutoConsumptionRule {
  id: string
  menuId: string
  menuName: string
  isActive: boolean
  ingredients: {
    productId: string
    product: string
    amountPerPortion: number
    unit: string
    wastagePercentage: number
  }[]
  createdAt: Date // Ensure this is a Date object
  updatedAt: Date // Ensure this is a Date object
}

interface AutoConsumptionProps {
  menuItems: any[]
  inventory: any[]
}

export function AutoConsumption({ menuItems, inventory }: AutoConsumptionProps) {
  const [isAddRuleDialogOpen, setIsAddRuleDialogOpen] = useState(false)
  const [isLogDialogOpen, setIsLogDialogOpen] = useState(false)
  const [consumptionLogs, setConsumptionLogs] = useState<AutoConsumptionLog[]>([])
  const [consumptionRules, setConsumptionRules] = useState<AutoConsumptionRule[]>([])
  const [searchTerm, setSearchTerm] = useState("")
  const [dateFilter, setDateFilter] = useState("")
  const [newRule, setNewRule] = useState({
    menuId: "",
    ingredients: [] as any[],
  })
  const [newLog, setNewLog] = useState({
    menuId: "",
    portionsMade: 0,
    date: new Date().toISOString().split("T")[0],
  })
  const [newIngredient, setNewIngredient] = useState({
    productId: "",
    amountPerPortion: 0,
    wastagePercentage: 0,
  })
  const { toast } = useToast()

  useEffect(() => {
    // Listen to consumption logs
    const logsQuery = query(collection(db, "warehouse_auto_consumption"), orderBy("date", "desc"))
    const unsubscribeLogs = onSnapshot(logsQuery, (snapshot) => {
      const logsData = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
        createdAt: (doc.data().createdAt as any)?.toDate
          ? (doc.data().createdAt as any).toDate()
          : new Date(doc.data().createdAt), // Convert Firestore Timestamp to Date
      })) as AutoConsumptionLog[]
      setConsumptionLogs(logsData)
    })

    // Listen to consumption rules
    const rulesQuery = query(collection(db, "warehouse_consumption_rules"), orderBy("menuName", "asc"))
    const unsubscribeRules = onSnapshot(rulesQuery, (snapshot) => {
      const rulesData = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
        createdAt: (doc.data().createdAt as any)?.toDate
          ? (doc.data().createdAt as any).toDate()
          : new Date(doc.data().createdAt), // Convert Firestore Timestamp to Date
        updatedAt: (doc.data().updatedAt as any)?.toDate
          ? (doc.data().updatedAt as any).toDate()
          : new Date(doc.data().updatedAt), // Convert Firestore Timestamp to Date
      })) as AutoConsumptionRule[]
      setConsumptionRules(rulesData)
    })

    return () => {
      unsubscribeLogs()
      unsubscribeRules()
    }
  }, [])

  const filteredLogs = consumptionLogs.filter((log) => {
    const matchesSearch = log.dish.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesDate = !dateFilter || log.date === dateFilter
    return matchesSearch && matchesDate
  })

  const addIngredientToRule = () => {
    if (!newIngredient.productId || newIngredient.amountPerPortion <= 0) {
      toast({
        title: "Xatolik",
        description: "Mahsulot va miqdorni kiriting",
        variant: "destructive",
      })
      return
    }

    const selectedProduct = inventory.find((item) => item.id === newIngredient.productId)
    if (!selectedProduct) return

    const ingredient = {
      productId: newIngredient.productId,
      product: selectedProduct.name,
      amountPerPortion: newIngredient.amountPerPortion,
      unit: selectedProduct.unit,
      wastagePercentage: newIngredient.wastagePercentage,
    }

    setNewRule((prev) => ({
      ...prev,
      ingredients: [...prev.ingredients, ingredient],
    }))

    setNewIngredient({
      productId: "",
      amountPerPortion: 0,
      wastagePercentage: 0,
    })
  }

  const removeIngredientFromRule = (index: number) => {
    setNewRule((prev) => ({
      ...prev,
      ingredients: prev.ingredients.filter((_, i) => i !== index),
    }))
  }

  const saveRule = async () => {
    if (!newRule.menuId || newRule.ingredients.length === 0) {
      toast({
        title: "Xatolik",
        description: "Menyu taomini tanlang va ingredientlar qo'shing",
        variant: "destructive",
      })
      return
    }

    const selectedMenu = menuItems.find((item) => item.id === newRule.menuId)
    if (!selectedMenu) return

    const ruleData = {
      menuId: newRule.menuId,
      menuName: selectedMenu.name,
      isActive: true,
      ingredients: newRule.ingredients,
      createdAt: new Date(),
      updatedAt: new Date(),
    }

    try {
      await addDoc(collection(db, "warehouse_consumption_rules"), ruleData)

      toast({
        title: "Muvaffaqiyat",
        description: "Avtomatik sarfiyot qoidasi qo'shildi",
      })

      setIsAddRuleDialogOpen(false)
      setNewRule({
        menuId: "",
        ingredients: [],
      })
    } catch (error) {
      toast({
        title: "Xatolik",
        description: "Qoidani saqlashda xatolik yuz berdi",
        variant: "destructive",
      })
    }
  }

  const toggleRuleStatus = async (ruleId: string, isActive: boolean) => {
    try {
      await updateDoc(doc(db, "warehouse_consumption_rules", ruleId), {
        isActive,
        updatedAt: new Date(),
      })

      toast({
        title: "Muvaffaqiyat",
        description: `Qoida ${isActive ? "faollashtirildi" : "o'chirildi"}`,
      })
    } catch (error) {
      toast({
        title: "Xatolik",
        description: "Qoida holatini o'zgartirishda xatolik yuz berdi",
        variant: "destructive",
      })
    }
  }

  const generateConsumptionLog = async () => {
    if (!newLog.menuId || newLog.portionsMade <= 0) {
      toast({
        title: "Xatolik",
        description: "Menyu taomini tanlang va porsiya sonini kiriting",
        variant: "destructive",
      })
      return
    }

    const selectedRule = consumptionRules.find((rule) => rule.menuId === newLog.menuId && rule.isActive)
    if (!selectedRule) {
      toast({
        title: "Xatolik",
        description: "Bu taom uchun faol qoida topilmadi",
        variant: "destructive",
      })
      return
    }

    const ingredientsUsed = selectedRule.ingredients
      .map((ingredient) => {
        const inventoryItem = inventory.find((item) => item.id === ingredient.productId)
        if (!inventoryItem) return null

        const baseAmount = ingredient.amountPerPortion * newLog.portionsMade
        const wasteAmount = baseAmount * (ingredient.wastagePercentage / 100)
        const totalUsed = baseAmount + wasteAmount
        const totalCost = totalUsed * inventoryItem.unitPrice

        return {
          productId: ingredient.productId,
          product: ingredient.product,
          used: totalUsed,
          unit: inventoryItem.unit,
          unitPrice: inventoryItem.unitPrice,
          totalCost,
        }
      })
      .filter((item): item is NonNullable<typeof item> => item !== null)

    const totalCost = ingredientsUsed.reduce((sum, ing) => sum + (ing?.totalCost || 0), 0)

    const logData = {
      date: newLog.date,
      menuId: newLog.menuId,
      dish: selectedRule.menuName,
      portionsMade: newLog.portionsMade,
      ingredientsUsed,
      totalCost,
      autoGenerated: false,
      createdAt: new Date(),
    }

    try {
      await addDoc(collection(db, "warehouse_auto_consumption"), logData)

      toast({
        title: "Muvaffaqiyat",
        description: "Sarfiyot yozuvi yaratildi",
      })

      setIsLogDialogOpen(false)
      setNewLog({
        menuId: "",
        portionsMade: 0,
        date: new Date().toISOString().split("T")[0],
      })
    } catch (error) {
      toast({
        title: "Xatolik",
        description: "Sarfiyot yozuvini saqlashda xatolik yuz berdi",
        variant: "destructive",
      })
    }
  }

  const getTodayStats = () => {
    const today = new Date().toISOString().split("T")[0]
    const todayLogs = consumptionLogs.filter((log) => log.date === today)

    const totalPortions = todayLogs.reduce((sum, log) => sum + log.portionsMade, 0)
    const totalCost = todayLogs.reduce((sum, log) => sum + log.totalCost, 0)
    const uniqueDishes = new Set(todayLogs.map((log) => log.menuId)).size
    const autoGenerated = todayLogs.filter((log) => log.autoGenerated).length

    return { totalPortions, totalCost, uniqueDishes, autoGenerated }
  }

  const todayStats = getTodayStats()

  return (
    <div className="space-y-6">
      <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
        <div>
          <h2 className="text-2xl font-bold">Avtomatik Sarfiyot</h2>
          <p className="text-muted-foreground">Menyu taomlarining avtomatik sarfiyot hisobi</p>
        </div>
        <div className="flex gap-2">
          <Dialog open={isAddRuleDialogOpen} onOpenChange={setIsAddRuleDialogOpen}>
            <DialogTrigger asChild>
              <Button variant="outline">
                <Settings className="h-4 w-4 mr-2" />
                Qoida Qo'shish
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>Yangi Sarfiyot Qoidasi</DialogTitle>
                <DialogDescription>Menyu taomi uchun avtomatik sarfiyot qoidasini yarating</DialogDescription>
              </DialogHeader>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="menuId">Menyu Taomi</Label>
                    <Select
                      value={newRule.menuId}
                      onValueChange={(value) => setNewRule((prev) => ({ ...prev, menuId: value }))}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Taomni tanlang" />
                      </SelectTrigger>
                      <SelectContent>
                        {menuItems.map((item) => (
                          <SelectItem key={item.id} value={item.id}>
                            {item.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="p-4 border rounded-lg bg-muted/50 space-y-3">
                    <h4 className="font-medium">Ingredient Qo'shish</h4>

                    <div className="space-y-2">
                      <Label>Mahsulot</Label>
                      <Select
                        value={newIngredient.productId}
                        onValueChange={(value) => setNewIngredient((prev) => ({ ...prev, productId: value }))}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Mahsulotni tanlang" />
                        </SelectTrigger>
                        <SelectContent>
                          {inventory.map((item) => (
                            <SelectItem key={item.id} value={item.id}>
                              {item.name} ({item.unit})
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="grid grid-cols-2 gap-2">
                      <div className="space-y-2">
                        <Label>1 Porsiyaga Miqdor</Label>
                        <Input
                          type="number"
                          step="0.01"
                          value={newIngredient.amountPerPortion || ""}
                          onChange={(e) =>
                            setNewIngredient((prev) => ({
                              ...prev,
                              amountPerPortion: Number.parseFloat(e.target.value) || 0,
                            }))
                          }
                          placeholder="0"
                        />
                      </div>
                      <div className="space-y-2">
                        <Label>Yo'qotish %</Label>
                        <Input
                          type="number"
                          value={newIngredient.wastagePercentage || ""}
                          onChange={(e) =>
                            setNewIngredient((prev) => ({
                              ...prev,
                              wastagePercentage: Number.parseInt(e.target.value) || 0,
                            }))
                          }
                          placeholder="0"
                        />
                      </div>
                    </div>

                    <Button onClick={addIngredientToRule} className="w-full">
                      <Plus className="h-4 w-4 mr-2" />
                      Ingredient Qo'shish
                    </Button>
                  </div>
                </div>

                <div className="space-y-4">
                  <h4 className="font-medium">Ingredientlar Ro'yxati</h4>
                  <div className="space-y-2 max-h-60 overflow-y-auto">
                    {newRule.ingredients.length === 0 ? (
                      <div className="text-center text-muted-foreground py-8">Hali ingredientlar qo'shilmagan</div>
                    ) : (
                      newRule.ingredients.map((ingredient, index) => (
                        <div
                          key={index}
                          className="flex items-center justify-between p-3 border rounded-lg bg-background"
                        >
                          <div className="flex-1">
                            <div className="font-medium">{ingredient.product}</div>
                            <div className="text-sm text-muted-foreground">
                              {ingredient.amountPerPortion} {ingredient.unit}/porsiya
                              {ingredient.wastagePercentage > 0 && (
                                <span className="ml-2 text-orange-600">
                                  (+{ingredient.wastagePercentage}% yo'qotish)
                                </span>
                              )}
                            </div>
                          </div>
                          <Button variant="outline" size="sm" onClick={() => removeIngredientFromRule(index)}>
                            <RotateCcw className="h-4 w-4" />
                          </Button>
                        </div>
                      ))
                    )}
                  </div>
                </div>
              </div>

              <DialogFooter>
                <Button variant="outline" onClick={() => setIsAddRuleDialogOpen(false)}>
                  Bekor qilish
                </Button>
                <Button onClick={saveRule}>Saqlash</Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>

          <Dialog open={isLogDialogOpen} onOpenChange={setIsLogDialogOpen}>
            <DialogTrigger asChild>
              <Button className="bg-gradient-to-r from-blue-600 to-green-600 hover:from-blue-700 hover:to-green-700">
                <Plus className="h-4 w-4 mr-2" />
                Sarfiyot Yaratish
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Yangi Sarfiyot Yozuvi</DialogTitle>
                <DialogDescription>Tayyorlangan taom porsiyalari asosida sarfiyot yarating</DialogDescription>
              </DialogHeader>

              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="date">Sana</Label>
                  <Input
                    id="date"
                    type="date"
                    value={newLog.date}
                    onChange={(e) => setNewLog((prev) => ({ ...prev, date: e.target.value }))}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="menuId">Menyu Taomi</Label>
                  <Select
                    value={newLog.menuId}
                    onValueChange={(value) => setNewLog((prev) => ({ ...prev, menuId: value }))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Taomni tanlang" />
                    </SelectTrigger>
                    <SelectContent>
                      {consumptionRules
                        .filter((rule) => rule.isActive)
                        .map((rule) => (
                          <SelectItem key={rule.id} value={rule.menuId}>
                            {rule.menuName}
                          </SelectItem>
                        ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="portionsMade">Tayyorlangan Porsiyalar</Label>
                  <Input
                    id="portionsMade"
                    type="number"
                    value={newLog.portionsMade || ""}
                    onChange={(e) =>
                      setNewLog((prev) => ({ ...prev, portionsMade: Number.parseInt(e.target.value) || 0 }))
                    }
                    placeholder="0"
                  />
                </div>

                {newLog.menuId && newLog.portionsMade > 0 && (
                  <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                    <h4 className="font-medium text-blue-800 mb-2">Hisoblangan Sarfiyot:</h4>
                    <div className="space-y-1 text-sm">
                      {consumptionRules
                        .find((rule) => rule.menuId === newLog.menuId)
                        ?.ingredients.map((ingredient, index) => {
                          const baseAmount = ingredient.amountPerPortion * newLog.portionsMade
                          const wasteAmount = baseAmount * (ingredient.wastagePercentage / 100)
                          const totalUsed = baseAmount + wasteAmount

                          return (
                            <div key={index} className="flex justify-between">
                              <span>{ingredient.product}:</span>
                              <span>
                                {totalUsed.toFixed(2)} {ingredient.unit}
                              </span>
                            </div>
                          )
                        })}
                    </div>
                  </div>
                )}
              </div>

              <DialogFooter>
                <Button variant="outline" onClick={() => setIsLogDialogOpen(false)}>
                  Bekor qilish
                </Button>
                <Button onClick={generateConsumptionLog}>Yaratish</Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      <div className="grid gap-4 md:grid-cols-4">
        <Card className="bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-blue-700">Bugungi Porsiyalar</CardTitle>
            <ChefHat className="h-4 w-4 text-blue-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-800">{todayStats.totalPortions}</div>
            <p className="text-xs text-blue-600">{todayStats.uniqueDishes} xil taom</p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-green-50 to-green-100 border-green-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-green-700">Bugungi Xarajat</CardTitle>
            <Calculator className="h-4 w-4 text-green-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-800">{formatCurrency(todayStats.totalCost)}</div>
            <p className="text-xs text-green-600">Sarflangan mahsulotlar</p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-purple-700">Faol Qoidalar</CardTitle>
            <Settings className="h-4 w-4 text-purple-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-purple-800">
              {consumptionRules.filter((rule) => rule.isActive).length}
            </div>
            <p className="text-xs text-purple-600">Jami {consumptionRules.length} ta qoida</p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-orange-50 to-orange-100 border-orange-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-orange-700">Avtomatik</CardTitle>
            <Activity className="h-4 w-4 text-orange-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-800">{todayStats.autoGenerated}</div>
            <p className="text-xs text-orange-600">Avtomatik yozuvlar</p>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Settings className="h-5 w-5" />
            Sarfiyot Qoidalari
          </CardTitle>
          <CardDescription>Menyu taomlarining avtomatik sarfiyot qoidalari</CardDescription>
        </CardHeader>
        <CardContent>
          {consumptionRules.length === 0 ? (
            <div className="text-center text-muted-foreground py-8">Hali sarfiyot qoidalari yaratilmagan</div>
          ) : (
            <div className="space-y-3">
              {consumptionRules.map((rule) => (
                <div key={rule.id} className="flex items-center justify-between p-4 border rounded-lg">
                  <div className="flex-1">
                    <div className="flex items-center gap-3">
                      <h4 className="font-semibold">{rule.menuName}</h4>
                      <Badge variant={rule.isActive ? "default" : "secondary"}>
                        {rule.isActive ? "Faol" : "Nofaol"}
                      </Badge>
                    </div>
                    <div className="text-sm text-muted-foreground mt-1">
                      {rule.ingredients.length} ta ingredient • Yaratilgan: {formatDate(rule.createdAt)}
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Switch checked={rule.isActive} onCheckedChange={(checked) => toggleRuleStatus(rule.id, checked)} />
                    {rule.isActive ? (
                      <Play className="h-4 w-4 text-green-600" />
                    ) : (
                      <Pause className="h-4 w-4 text-gray-600" />
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      <div className="flex flex-col gap-4 md:flex-row md:items-center">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Taom nomi bo'yicha qidirish..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>
        <div className="flex items-center gap-2">
          <Label htmlFor="dateFilter" className="text-sm">
            Sana:
          </Label>
          <Input
            id="dateFilter"
            type="date"
            value={dateFilter}
            onChange={(e) => setDateFilter(e.target.value)}
            className="w-auto"
          />
          <Button variant="outline" onClick={() => setDateFilter("")} size="sm">
            Barcha sanalar
          </Button>
        </div>
      </div>

      <div className="space-y-4">
        {filteredLogs.length === 0 ? (
          <Card>
            <CardContent className="flex flex-col items-center justify-center py-12">
              <Calculator className="h-12 w-12 text-muted-foreground mb-4" />
              <h3 className="text-lg font-semibold mb-2">Sarfiyot yozuvlari yo'q</h3>
              <p className="text-muted-foreground text-center mb-4">
                {searchTerm || dateFilter
                  ? "Qidiruv shartlariga mos yozuv topilmadi"
                  : "Birinchi sarfiyot yozuvingizni yarating"}
              </p>
            </CardContent>
          </Card>
        ) : (
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {filteredLogs.map((log) => (
              <Card key={log.id} className="hover:shadow-lg transition-shadow">
                <CardHeader className="pb-3">
                  <div className="flex justify-between items-start">
                    <div>
                      <CardTitle className="text-lg">{log.dish}</CardTitle>
                      <CardDescription className="flex items-center gap-2">
                        <Calendar className="h-4 w-4" />
                        {formatDate(log.date)}
                      </CardDescription>
                    </div>
                    <div className="flex gap-1">
                      <Badge variant={log.autoGenerated ? "default" : "secondary"}>
                        {log.autoGenerated ? "Avtomatik" : "Qo'lda"}
                      </Badge>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-muted-foreground">Porsiyalar:</span>
                    <span className="font-medium">{log.portionsMade} ta</span>
                  </div>

                  <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                    <div className="text-sm text-green-600">Jami Xarajat</div>
                    <div className="text-lg font-bold text-green-800">{formatCurrency(log.totalCost)}</div>
                  </div>

                  <div className="space-y-2">
                    <div className="text-sm font-medium">Sarflangan Ingredientlar:</div>
                    <div className="space-y-1">
                      {log.ingredientsUsed.slice(0, 3).map((ingredient, index) => (
                        <div key={index} className="flex justify-between text-xs">
                          <span>{ingredient.product}:</span>
                          <span>
                            {ingredient.used.toFixed(2)} {ingredient.unit}
                          </span>
                        </div>
                      ))}
                      {log.ingredientsUsed.length > 3 && (
                        <div className="text-xs text-muted-foreground">
                          +{log.ingredientsUsed.length - 3} ta boshqa ingredient
                        </div>
                      )}
                    </div>
                  </div>

                  <Separator />

                  <div className="text-xs text-muted-foreground">Yaratilgan: {formatDateTime(log.createdAt)}</div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  )
}
